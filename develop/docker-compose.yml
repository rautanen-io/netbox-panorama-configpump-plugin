---
volumes:
  netbox-panorama-configpump-plugin-postgres:
    name: netbox-panorama-configpump-plugin-postgres
    driver: local

services:
  netbox:
    container_name: netbox-panorama-configpump-plugin-netbox
    image: netbox_panorama_configpump_plugin/netbox:${NETBOX_VERSION}-${PYTHON_VERSION}
    profiles:
    - netbox
    depends_on:
      - postgres
      - redis
    init: true
    command:
      - sh
      - -c
      - python manage.py migrate && python manage.py runserver 0.0.0.0:8000
    ports:
      - '3000:3000'
      - '8000:8000'
    volumes:
      - ${PWD}/:/opt/netbox_panorama_configpump_plugin
      - ${PWD}/develop/configuration.py:/opt/netbox/netbox/netbox/configuration.py
      - ${PWD}/develop/manage.py:/opt/netbox/netbox/manage.py
    env_file: ${PWD}/develop/dev.env
    tty: true
    build: &build
      context: ${PWD}
      dockerfile: ${PWD}/develop/Dockerfile
      args:
      - NETBOX_VERSION
      - PYTHON_VERSION

  worker:
    container_name: netbox-panorama-configpump-plugin-worker
    image: netbox_panorama_configpump_plugin/worker:${NETBOX_VERSION}-${PYTHON_VERSION}
    profiles:
    - netbox
    depends_on:
      - netbox
    init: true
    command:
      - sh
      - -c
      - python manage.py rqworker
    volumes:
      - ${PWD}/:/opt/netbox_panorama_configpump_plugin
      - ${PWD}/develop//configuration.py:/opt/netbox/netbox/netbox/configuration.py
    env_file: ${PWD}/develop/dev.env
    tty: true
    build:
      <<: *build

  postgres:
    container_name: netbox-panorama-configpump-plugin-postgres
    image: postgres:16
    profiles:
    - netbox
    env_file: dev.env
    command: -c fsync=off
    volumes:
      - netbox-panorama-configpump-plugin-postgres:/var/lib/postgresql/data

  redis:
    container_name: netbox-panorama-configpump-plugin-redis
    image: redis:7
    profiles:
    - netbox
    init: true
    command:
      - sh
      - -c
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD
    env_file: ${PWD}/develop/dev.env
